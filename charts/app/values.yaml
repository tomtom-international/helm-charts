---
global:
  supportedKinds:
    argoApplications: [argoproj.io/v1alpha1, Application, argoApplication, true]
    argoRollouts: [argoproj.io/v1alpha1, Rollout, argoRollout, true]
    certificates: [cert-manager.io/v1, Certificate, certificate, true]
    configMaps: [v1, ConfigMap, configMap, false]
    cronJobs: [batch/v1, CronJob, cronJob, true]
    deployments: [apps/v1, Deployment, deployment, true]
    externalSecrets: [external-secrets.io/v1beta1, ExternalSecret, externalSecret, true]
    horizontalPodAutoscalers: [autoscaling/v2, HorizontalPodAutoscaler, horizontalPodAutoscaler, false]
    httpRoutes: [gateway.networking.k8s.io/v1, HTTPRoute, httpRoute, true]
    ingresses: [networking.k8s.io/v1, Ingress, ingress, false]
    istioGateways: [networking.istio.io/v1, Gateway, istioGateway, false]
    istioVirtualServices: [networking.istio.io/v1beta1, VirtualService, istioVirtualService, false]
    istioAuthorizationPolicies: [security.istio.io/v1, AuthorizationPolicy, istioAuthorizationPolicy, false]
    networkPolicies: [networking.k8s.io/v1, NetworkPolicy, networkPolicy, false]
    persistentVolumeClaims: [v1, PersistentVolumeClaim, persistentVolumeClaim, false]
    pods: [v1, Pod, pod, true]
    podDisruptionBudgets: [policy/v1, PodDisruptionBudget, podDisruptionBudget, true]
    secretStores: [external-secrets.io/v1beta1, SecretStore, secretStore, false]
    services: [v1, Service, service, true]
    serviceAccounts: [v1, ServiceAccount, serviceAccount, false]
    statefulSets: [apps/v1, StatefulSet, statefulSet, true]
    vmAlertmanagerConfigs: [operator.victoriametrics.com/v1beta1, VMAlertmanagerConfig, vmAlertmanagerConfig, true]
    vmRules: [operator.victoriametrics.com/v1beta1, VMRule, vmRule, true]

common:
  metadata:
    labels: {}
    annotations: {}

  serviceAccount: {}

  secretStore:
    spec:
      provider:
        azurekv:
          authType: WorkloadIdentity

  externalSecret:
    spec:
      refreshInterval: 1h
      secretStoreRef:
        kind: SecretStore
      target:
        creationPolicy: Owner

  configMap: {}

  persistentVolumeClaim:
    spec:
      storageClassName: managed-csi
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
      volumeMode: Filesystem

  container:
    securityContext:
      readOnlyRootFilesystem: true
      allowPrivilegeEscalation: false
      capabilities:
        drop: [ALL]

  pod: &pod
    spec:
      serviceAccountName: default
      automountServiceAccountToken: false
      enableServiceLinks: false
      securityContext:
        seccompProfile:
          type: RuntimeDefault

  cronJob:
    spec:
      concurrencyPolicy: Forbid
      successfulJobsHistoryLimit: 1
      jobTemplate:
        spec:
          template:
            <<: *pod

  deployment:
    spec:
      strategy:
        type: RollingUpdate
      revisionHistoryLimit: 3
      selector: {}
      template:
        <<: *pod

  statefulSet:
    spec:
      revisionHistoryLimit: 3
      selector: {}
      template:
        <<: *pod

  podDisruptionBudget:
    spec:
      maxUnavailable: 1
      unhealthyPodEvictionPolicy: AlwaysAllow

  horizontalPodAutoscaler:
    spec:
      scaleTargetRef:
        apiVersion: apps/v1
        kind: Deployment
      metrics:
      - type: Resource
        resource:
          name: cpu
          target:
            type: Utilization
            averageUtilization: 75
      minReplicas: 2
      maxReplicas: 10

  service: {}

  httpRoute: {}

  ingress:
    spec:
      ingressClassName: istio

  istioGateway: {}

  istioVirtualService: {}

  istioAuthorizationPolicy: {}

  argoApplication:
    spec:
      destination:
        server: https://kubernetes.default.svc
      syncPolicy:
        automated: {}

  argoRollout:
    spec:
      template:
        <<: *pod

  certificate:
    spec:
      issuerRef:
        name: hydrantid
        kind: ClusterIssuer
        group: cert-manager.io
      usages:
        - digital signature
        - key encipherment

  networkPolicy: {}

  vmAlertmanagerConfig:
    spec:
      route:
        group_interval: 1m

  vmRule: {}
